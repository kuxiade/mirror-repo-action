name: Sync repo from Github to Gitee

on:
  # push推送时触发
  push:
    branches: [ main ]
    # 匹配到该路径的文件有push时触发
    paths:
      # .github/workflows/ 目录下的文件有推送提交时，工作流触发
      #- '.github/workflows/**'
      # 只有当本文件有推送提交时，才工作流触发
      - '.github/workflows/github-to-gitee.yml'
      - 'action.yml'
      - 'Dockerfile'
      - 'entrypoint.sh'
    # paths-ignore 表示该路径的文件有push时忽略触发。这里使用上面的 paths 来设置更符合我的要求(只有当本文件有推送提交时，该工作流触发 )。
    # paths-ignore:
    #   - 'docs/**'
    #   - 'README.md'
  # 定时任务触发
  schedule:
    # Runs at 04:00 UTC (12:00 AM Beijing) every day
    #- cron:  '0 4 * * *'
    # 每隔4小时执行一次
    - cron:  '0 */4 * * *'

jobs:
  job1:
    name: Github to Gitee:emacs-hub
    runs-on: ubuntu-latest
    steps:
      - name: a Print sys-release
        run: |
          echo "Print sys-release"
          cat /etc/*-release

      - name: a Print pre-cache path
        # 此时还没有取回上一次的缓存到指定的 'steps.cacheSrcRepos.with.path' 中
        run: |
          echo "ls -la" $PWD
          ls -la
          echo ""
          echo "ls -la" ${{ github.workspace }}
          ls -la ${{ github.workspace }}

      - name: Checkout source codes
        uses: actions/checkout@v1

      - name: Get Time info
        id: getTime
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d%H%M%S%N")"
        shell: bash

      - name: Get Repo info
        id: getRepo
        uses: actions/github-script@v3
        with:
          script: |
            core.setOutput('ownerRepo', `${context.repo.owner}-${context.repo.repo}`)
      
      - name: Cache src repos with actions/cache
        uses: actions/cache@v2
        id: cacheSrcRepos
        with:
          # ${{ github.workspace }} 展开为: /home/runner/work/repo-sync-action/repo-sync-action
          # ${{ github.job }} 展开为: <job_id>
          # 运行时 path 展开为: /home/runner/work/repo-sync-action/repo-sync-action/<job_id>-cache
          path: ${{ github.workspace }}/${{ github.job }}-cache
          key: ${{ runner.os }}-${{ steps.getRepo.outputs.ownerRepo }}-${{ github.job }}-cache-${{ steps.getTime.outputs.date }}
          restore-keys: ${{ runner.os }}-${{ steps.getRepo.outputs.ownerRepo }}-${{ github.job }}-cache-

      - name: Print the cache status
        if: steps.cacheSrcRepos.outputs.cache-hit == 'true'
        run: echo "Cached successfully."

      - name: b Print post-cache path - Last time cache
        # 此时已经取回了上一次的缓存到指定的 'steps.cacheSrcRepos.with.path' 中
        # 运行时缓存路径展开为: ls -la /home/runner/work/repo-sync-action/repo-sync-action/<job_id>-cache
        run: |
          echo "ls -la" $PWD
          ls -la
          echo ""
          echo "ls -la" ${{ github.workspace }}
          ls -la ${{ github.workspace }}
          echo ""
          echo "ls -la" ${{ github.workspace }}/${{ github.job }}-cache
          ls -la ${{ github.workspace }}/${{ github.job }}-cache || (echo "warning!";exit 0)

      - name: Mirror docs
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:github/docs.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:mirror-hub/github-docs.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror ohmyzsh
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:ohmyzsh/ohmyzsh.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:mirror-hub/ohmyzsh.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror vscode-dev-containers
        # 将 continue-on-error 设置为 true，表示即使当前 step 报错，后续的 steps 也能继续执行。
        #continue-on-error: true
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:microsoft/vscode-dev-containers.git"
          #src_repo_branch: "refs/remotes/origin/bowdenk7"
          #src_repo_tag: "refs/tags/v0.150.0"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:mirror-hub/vscode-dev-containers.git"
          #dst_repo_branch: "refs/heads/csharp-update"
          #dst_repo_tag: "v0.150.0"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror doom-emacs
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:hlissner/doom-emacs.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/doom-emacs.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: "/github/workspace/${{ github.job }}-cache"

      - name: Mirror auto-save
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/auto-save.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/auto-save.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror aweshell
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/aweshell.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/aweshell.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror awesome-pair
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/awesome-pair.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/awesome-pair.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror awesome-tab
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/awesome-tab.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/awesome-tab.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror color-rg
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/color-rg.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/color-rg.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror company-english-helper
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/company-english-helper.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/company-english-helper.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror emacs-application-framework
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/emacs-application-framework.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/emacs-application-framework.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror insert-translated-name
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/insert-translated-name.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/insert-translated-name.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror nox
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/nox.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/nox.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror sdcv
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/sdcv.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/sdcv.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror snails
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/snails.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/snails.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: Mirror thing-edit
        uses: ./
        env:
          # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
        with:
          # # 用于目的端上传代码的SSH key，用于从gituhb虚拟机上传代码到目的端仓库。
          # ssh_private_key: ${{ secrets.GITEE_PRIVATE_SSH_KEY }}
          # 需要被同步的源端仓库
          src_repo_url: "git@github.com:manateelazycat/thing-edit.git"
          # 需要同步到的目的仓库
          dst_repo_url: "git@gitee.com:emacs-hub/thing-edit.git"
          # cache_path (optional) 将代码缓存在指定目录，用于与actions/cache配合以加速镜像过程。
          # 'cache_path' 与 'steps.cacheSrcRepos.with.path' 值保持一致
          cache_path: /github/workspace/${{ github.job }}-cache

      - name: c Print post-cache path - This time cache
        # 本次缓存（可能包含有仓库更新的内容），也就是 'steps.cacheSrcRepos.with.path' 中的所有内容，
        # 在下一次执行该工作流时，其会作为缓存。被取回到指定的 'steps.cacheSrcRepos.with.path' 中
        # 运行时缓存路径展开为: ls -la /home/runner/work/repo-sync-action/repo-sync-action/<job_id>-cache
        run: |
          echo "ls -la" $PWD
          ls -la
          echo ""
          echo "ls -la" ${{ github.workspace }}
          ls -la ${{ github.workspace }}
          echo ""
          echo "ls -la" ${{ github.workspace }}/${{ github.job }}-cache
          ls -la ${{ github.workspace }}/${{ github.job }}-cache || (echo "warning!";exit 0)